/*
* sobel_9.BDL
# Design Name        sobel
# FU Library File    /proj/cad/cwb-6.1/packages/asic_45.FLIB
# MEM  Limit File    %AUTO%.MLMT
# Basic Library File /proj/cad/cwb-6.1/packages/asic_45.BLIB
# PORT Limit File    %AUTO%.PLMT
# PORT relation File %AUTO%.PREL
# Clock Cycle        100000 (1/10ps).
# Clock Uncertainty  0-->10000 (1/10ps)
# Performance index  max/min/ave  7 / 7 / 7.00
# Data-path info.    
# Bp-Option  ../benchmarks/sobel/sobel.c -process=sobel
# Option  -c1000 -s sobel.IFF -lfl /proj/cad/cwb-6.1/packages/asic_45.FLIB -lb /proj/cad/cwb-6.1/packages/asic_45.BLIB 
# Version  bdltran version : 6.10.04  Thu Mar 22 14:18:17 JST 2018
*/
defmod MEMB8W9 {
    in    unsigned ter(0:4)  RA1/* Cyber mem_id = MEMB8W9@1, other = DC */;
    out   signed   ter(0:8)  RD1/* Cyber mem_id = MEMB8W9@1 */;
    in    unsigned ter(0:1)  RE1/* Cyber mem_id = MEMB8W9@1 */;
    in    unsigned ter(0:1)  RCLK1/* Cyber clock_edge = pos, mem_id = MEMB8W9@1 */ /* line# ../benchmarks/sobel/sobel.c:52 */;
} Gx 	/* line# ../benchmarks/sobel/sobel.c:52 */;


/* Cyber default_bit_order = up, func = process */
process
sobel(
    in   unsigned ter(0:8)  input_row_a00 /* line# ../benchmarks/sobel/sobel.c:43 */,
    in   unsigned ter(0:8)  input_row_a01 /* line# ../benchmarks/sobel/sobel.c:43 */,
    in   unsigned ter(0:8)  input_row_a02 /* line# ../benchmarks/sobel/sobel.c:43 */,
    out  unsigned ter(0:8)  sobel_ret/* Cyber sche = reg */ /* line# ../benchmarks/sobel/sobel.c:43 */,
    clock         CLOCK/* Cyber clock_edge = pos */,
    reset         RESET/* Cyber reset_mode = async, reset_active = high */
    )
{
    unsigned ter(0:1)  line_buffer_we01 /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned ter(0:1)  line_buffer_we00 /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned ter(0:8)  line_buffer_wd01/* Cyber other = DC */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned ter(0:8)  line_buffer_wd00/* Cyber other = DC */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned ter(0:8)  line_buffer_rd01/* Cyber other = DC */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned ter(0:8)  line_buffer_rd00/* Cyber other = DC */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned ter(0:12)  line_buffer_d01 /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned ter(0:4)  line_buffer_ad01/* Cyber other = DC */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned ter(0:4)  line_buffer_ad00/* Cyber other = DC */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned reg(0:8)  line_buffer_rg10/* Cyber org_ary = 3,3, org_ary2 = 3,4 */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned reg(0:8)  line_buffer_rg09/* Cyber org_ary = 3,3, org_ary2 = 3,4 */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned reg(0:8)  line_buffer_rg08/* Cyber org_ary = 3,3, org_ary2 = 3,4 */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned reg(0:8)  line_buffer_rg06/* Cyber org_ary = 3,3, org_ary2 = 3,4 */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned reg(0:8)  line_buffer_rg05/* Cyber org_ary = 3,3, org_ary2 = 3,4 */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned reg(0:8)  line_buffer_rg04/* Cyber org_ary = 3,3, org_ary2 = 3,4 */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned reg(0:8)  line_buffer_rg02/* Cyber org_ary = 3,3, org_ary2 = 3,4 */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned reg(0:8)  line_buffer_rg01/* Cyber org_ary = 3,3, org_ary2 = 3,4 */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned reg(0:8)  line_buffer_rg00/* Cyber org_ary = 3,3, org_ary2 = 3,4 */ /* line# ../benchmarks/sobel/sobel.c:30 */;
    unsigned ter(0:2)  addsub32s_32_12_f/* Cyber other = DC */;
    signed   ter(0:32)  addsub32s_32_12i2/* Cyber other = DC */;
    signed   ter(0:2)  addsub32s_32_12i1/* Cyber other = DC */;
    signed   ter(0:32)  addsub32s_32_12ot;
    unsigned ter(0:2)  addsub32s_32_11_f/* Cyber other = DC */;
    signed   ter(0:32)  addsub32s_32_11i2/* Cyber other = DC */;
    signed   ter(0:2)  addsub32s_32_11i1/* Cyber other = DC */;
    signed   ter(0:32)  addsub32s_32_11ot;
    unsigned ter(0:2)  addsub32s_321_f/* Cyber other = DC */;
    signed   ter(0:16)  addsub32s_321i2/* Cyber other = DC */;
    signed   ter(0:32)  addsub32s_321i1/* Cyber other = DC */;
    signed   ter(0:32)  addsub32s_321ot;
    signed   ter(0:2)  Gy1i2/* Cyber other = DC */;
    signed   ter(0:2)  Gy1i1/* Cyber other = DC */;
    signed   ter(0:3)  Gy1ot;
    unsigned ter(0:2)  addsub32s1_f/* Cyber other = DC */;
    signed   ter(0:32)  addsub32s1i2/* Cyber other = DC */;
    signed   ter(0:32)  addsub32s1i1/* Cyber other = DC */;
    signed   ter(0:32)  addsub32s1ot;
    unsigned ter(0:2)  decr2u_12i1/* Cyber other = DC */;
    unsigned ter(0:1)  decr2u_12ot;
    unsigned ter(0:2)  decr2u_11i1/* Cyber other = DC */;
    unsigned ter(0:1)  decr2u_11ot;
    signed   ter(0:2)  incr2s4i1/* Cyber other = DC */;
    signed   ter(0:2)  incr2s4ot;
    signed   ter(0:2)  incr2s3i1/* Cyber other = DC */;
    signed   ter(0:2)  incr2s3ot;
    signed   ter(0:2)  incr2s2i1/* Cyber other = DC */;
    signed   ter(0:2)  incr2s2ot;
    signed   ter(0:2)  incr2s1i1/* Cyber other = DC */;
    signed   ter(0:2)  incr2s1ot;
    signed   ter(0:8)  mul12s1i2/* Cyber other = DC */;
    signed   ter(0:9)  mul12s1i1/* Cyber other = DC */;
    signed   ter(0:16)  mul12s1ot;
    signed   ter(0:2)  sub2s1i2/* Cyber other = DC */;
    signed   ter(0:2)  sub2s1i1/* Cyber other = DC */;
    signed   ter(0:2)  sub2s1ot;
    unsigned ter(0:2)  sub2u1i2/* Cyber other = DC */;
    unsigned ter(0:2)  sub2u1i1/* Cyber other = DC */;
    unsigned ter(0:3)  sub2u1ot;
    signed   ter(0:4)  add4s1i2/* Cyber other = DC */;
    signed   ter(0:3)  add4s1i1/* Cyber other = DC */;
    signed   ter(0:4)  add4s1ot;
    signed   ter(0:8)  M_48/* Cyber other = DC */;
    signed   ter(0:3)  M_47/* Cyber other = DC */;
    unsigned ter(0:8)  M_46/* Cyber other = DC */;
    unsigned ter(0:1)  CT_08/* Cyber other = DC */;
    unsigned ter(0:1)  CT_07/* Cyber other = DC */;
    unsigned ter(0:1)  CT_06/* Cyber other = DC */;
    unsigned ter(0:1)  CT_05/* Cyber other = DC */;
    unsigned ter(0:1)  JF_02/* Cyber other = DC */;
    signed   ter(0:32)  M_39_t/* Cyber other = DC */;
    signed   ter(0:8)  SUM3_t1/* Cyber other = DC */;
    signed   ter(0:8)  SUM3_t/* Cyber other = DC */;
    signed   ter(0:32)  SUM2_t/* Cyber other = DC */;
    signed   ter(0:32)  sumY_t3/* Cyber other = DC */;
    signed   ter(0:32)  sumX_t4/* Cyber other = DC */;
    signed   ter(0:32)  sumY_t2/* Cyber other = DC */;
    signed   ter(0:32)  sumX_t3/* Cyber other = DC */;
    signed   ter(0:32)  sumX_t2/* Cyber other = DC */;
    signed   ter(0:32)  sumX_t1/* Cyber other = DC */;
    signed   ter(0:32)  sumX_t/* Cyber other = DC */;
    signed   ter(0:16)  M_251_t/* Cyber other = DC */;
    unsigned ter(0:1)  CT_04/* Cyber other = DC */;
    unsigned ter(0:1)  CT_03/* Cyber other = DC */;
    unsigned ter(0:1)  CT_02/* Cyber other = DC */;
    unsigned ter(0:1)  M_43_t/* Cyber other = DC */;
    unsigned ter(0:2)  M_42_t/* Cyber other = DC */;
    unsigned ter(0:1)  M_44_t/* Cyber other = DC */;
    unsigned ter(0:2)  M_41_t/* Cyber other = DC */;
    unsigned ter(0:4)  M_38_t/* Cyber other = DC */;
    signed   ter(0:3)  M_37_t/* Cyber other = DC */;
    signed   ter(0:32)  sumY_t1/* Cyber other = DC */;
    unsigned ter(0:2)  rowOffset11_t/* Cyber other = DC */;
    unsigned ter(0:2)  colOffset11_t/* Cyber other = DC */;
    signed   ter(0:32)  sumY_t/* Cyber other = DC */;
    signed   ter(0:10)  M_301_t/* Cyber other = DC */;
    unsigned ter(0:8)  M_36_t/* Cyber other = DC */;
    unsigned ter(0:8)  BF_01_t/* Cyber other = DC */;
    unsigned ter(0:4)  M_12_t/* Cyber other = DC */;
    unsigned ter(0:2)  M_32_t/* Cyber other = DC */;
    unsigned ter(0:4)  M_35_t/* Cyber other = DC */;
    unsigned ter(0:2)  M_31_t/* Cyber other = DC */;
    unsigned ter(0:2)  M_34_t/* Cyber other = DC */;
    unsigned ter(0:1)  JF_01/* Cyber other = DC */;
    unsigned ter(0:4)  M_19_t/* Cyber other = DC */;
    unsigned ter(0:4)  M_18_t/* Cyber other = DC */;
    unsigned ter(0:1)  CT_01/* Cyber other = DC */;
    unsigned ter(0:1)  M_45_t/* Cyber other = DC */;
    unsigned ter(0:3)  M_171_t/* Cyber other = DC */;
    unsigned ter(0:3)  M_161_t/* Cyber other = DC */;
    unsigned ter(0:2)  M_151_t/* Cyber other = DC */;
    unsigned ter(0:1)  M_141_t/* Cyber other = DC */;
    unsigned ter(0:1)  M_331_t/* Cyber other = DC */;
    unsigned ter(0:8)  BF_01;
    unsigned var(0:1)  M_45;
    unsigned var(0:1)  M_44;
    unsigned var(0:1)  M_43;
    unsigned var(0:2)  M_42;
    unsigned var(0:2)  M_41;
    unsigned var(0:1)  M_40;
    signed   var(0:32)  M_39;
    unsigned var(0:1)  M_331;
    signed   var(0:10)  M_301;
    signed   var(0:3)  M_281;
    signed   var(0:16)  M_251;
    unsigned var(0:3)  M_171;
    unsigned var(0:3)  M_161;
    unsigned var(0:2)  M_151;
    unsigned var(0:1)  M_141;
    unsigned var(0:1)  Y12 /* line# ../benchmarks/sobel/sobel.c:46 */;
    unsigned var(0:2)  Y11 /* line# ../benchmarks/sobel/sobel.c:46 */;
    signed   var(0:2)  rowOffset12 /* line# ../benchmarks/sobel/sobel.c:48 */;
    unsigned var(0:2)  rowOffset11 /* line# ../benchmarks/sobel/sobel.c:48 */;
    signed   var(0:2)  colOffset12 /* line# ../benchmarks/sobel/sobel.c:48 */;
    unsigned var(0:2)  colOffset11 /* line# ../benchmarks/sobel/sobel.c:48 */;
    signed   var(0:8)  SUM3 /* line# ../benchmarks/sobel/sobel.c:48 */;
    signed   var(0:32)  SUM2 /* line# ../benchmarks/sobel/sobel.c:48 */;
    unsigned var(0:8)  SUM1 /* line# ../benchmarks/sobel/sobel.c:48 */;
    unsigned var(0:4)  M_38;
    signed   var(0:3)  M_37;
    signed   var(0:8)  Gx_pio/* Cyber sig2reg_ex_force = Gx_pio, pipemem_io */;
    unsigned var(0:8)  M_36;
    unsigned var(0:4)  M_35;
    unsigned var(0:2)  M_34;
    unsigned var(0:2)  M_33;
    unsigned var(0:2)  M_32;
    unsigned var(0:2)  M_31;
    signed   var(0:17)  M_30;
    signed   var(0:9)  M_29;
    signed   var(0:8)  M_28;
    unsigned var(0:2)  M_27;
    unsigned var(0:2)  M_26;
    signed   var(0:17)  M_25;
    signed   var(0:9)  M_24;
    signed   var(0:8)  M_23;
    unsigned var(0:4)  M_22;
    unsigned var(0:2)  M_21;
    unsigned var(0:2)  M_20;
    unsigned var(0:4)  M_19;
    unsigned var(0:4)  M_18;
    unsigned var(0:4)  M_17;
    unsigned var(0:4)  M_16;
    unsigned var(0:4)  M_15;
    unsigned var(0:4)  M_14;
    unsigned var(0:4)  M_13;
    unsigned var(0:4)  M_12;
    unsigned var(0:4)  M_11;
    unsigned var(0:2)  M_10;
    unsigned var(0:2)  M_09;
    unsigned var(0:2)  M_08;
    unsigned var(0:2)  M_07;
    unsigned var(0:2)  M_06;
    unsigned var(0:2)  M_05;
    unsigned var(0:2)  M_04;
    unsigned var(0:2)  M_03;
    unsigned var(0:2)  M_02;
    unsigned var(0:2)  M_01;
    unsigned var(0:8)  VR_input_row_a02 /* line# ../benchmarks/sobel/sobel.c:43 */;
    unsigned var(0:8)  VR_input_row_a01 /* line# ../benchmarks/sobel/sobel.c:43 */;
    unsigned var(0:8)  VR_input_row_a00 /* line# ../benchmarks/sobel/sobel.c:43 */;
    unsigned var(0:2)  Y1 /* line# ../benchmarks/sobel/sobel.c:46 */;
    signed   var(0:3)  rowOffset1 /* line# ../benchmarks/sobel/sobel.c:48 */;
    signed   var(0:3)  colOffset1 /* line# ../benchmarks/sobel/sobel.c:48 */;
    unsigned var(0:8)  sobel_ret_1 /* line# ../benchmarks/sobel/sobel.c:43 */;
    signed   reg(0:8)  Gx_pio0/* Cyber reset_sig = void, other = DC, pipemem_io, sig2reg_ex_force = Gx_pio */;
    unsigned /* mixed */ reg(0:32)  RG_sumX/* Cyber reset_sig = void */ /* line# ../benchmarks/sobel/sobel.c:43,47 */;
    unsigned /* mixed */ reg(0:32)  RG_sumY/* Cyber reset_sig = void */ /* line# ../benchmarks/sobel/sobel.c:43,47 */;
    unsigned /* mixed */ reg(0:8)  RG_rowOffset/* Cyber reset_sig = void */ /* line# ../benchmarks/sobel/sobel.c:43,48 */;
    unsigned /* mixed */ reg(0:2)  RG_colOffset_Y/* Cyber reset_sig = void */ /* line# ../benchmarks/sobel/sobel.c:46,48 */;
    unsigned reg(0:1)  RG_04/* Cyber reset_sig = void */;
    unsigned reg(0:1)  FF_Y/* Cyber reset_sig = void */ /* line# ../benchmarks/sobel/sobel.c:46 */;
    signed   reg(0:2)  RG_rowOffset_1/* Cyber reset_sig = void, other = DC */ /* line# ../benchmarks/sobel/sobel.c:48 */;
    unsigned reg(0:1)  RG_07/* Cyber reset_sig = void */;
    unsigned reg(0:8)  sobel_ret_r /* line# ../benchmarks/sobel/sobel.c:43 */;


ST1_01 :
    addsub32s_32_11ot(0:32) ::= addsub32s_32_1@1(addsub32s_32_11i1(0:2), addsub32s_32_11i2(0:32), addsub32s_32_11_f(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:92 */
    addsub32s_32_12ot(0:32) ::= addsub32s_32_1@2(addsub32s_32_12i1(0:2), addsub32s_32_12i2(0:32), addsub32s_32_12_f(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:95 */
    addsub32s_321ot(0:32) ::= addsub32s_32@1(addsub32s_321i1(0:32), addsub32s_321i2(0:16), addsub32s_321_f(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    Gy1ot(0:3) ::= dmux (Gy1i1(0:2)) { 	/* line# ../benchmarks/sobel/sobel.c:86 */
        case 0 : 
            dmux (Gy1i2(0:2)) { 	/* line# ../benchmarks/sobel/sobel.c:57 */
                case 0 :  1(0:3); 	/* line# ../benchmarks/sobel/sobel.c:57 */
                case 1 :  2(0:3); 	/* line# ../benchmarks/sobel/sobel.c:57 */
                case 2 :  1(0:3); 	/* line# ../benchmarks/sobel/sobel.c:57 */
            };
        case 1 : 
            dmux (Gy1i2(0:2)) { 	/* line# ../benchmarks/sobel/sobel.c:57 */
                case 0 :  0(0:3); 	/* line# ../benchmarks/sobel/sobel.c:57 */
                case 1 :  0(0:3); 	/* line# ../benchmarks/sobel/sobel.c:57 */
                case 2 :  0(0:3); 	/* line# ../benchmarks/sobel/sobel.c:57 */
            };
        case 2 : 
            dmux (Gy1i2(0:2)) { 	/* line# ../benchmarks/sobel/sobel.c:57 */
                case 0 :  7(0:3); 	/* line# ../benchmarks/sobel/sobel.c:57 */
                case 1 :  6(0:3); 	/* line# ../benchmarks/sobel/sobel.c:57 */
                case 2 :  7(0:3); 	/* line# ../benchmarks/sobel/sobel.c:57 */
            };
    };
    addsub32s1ot(0:32) ::= addsub32s@1(addsub32s1i1(0:32), addsub32s1i2(0:32), addsub32s1_f(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:86,98 */
    decr2u_11ot(0:1) ::= decr2u_1@1(decr2u_11i1(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:64 */
    decr2u_12ot(0:1) ::= decr2u_1@2(decr2u_12i1(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    incr2s1ot(0:2) ::= incr2s@1(incr2s1i1(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:84 */
    incr2s2ot(0:2) ::= incr2s@2(incr2s2i1(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    incr2s3ot(0:2) ::= incr2s@3(incr2s3i1(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    incr2s4ot(0:2) ::= incr2s@4(incr2s4i1(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:82 */
    mul12s1ot(0:16) ::= mul12s@1(mul12s1i1(0:9), mul12s1i2(0:8)); 	/* line# ../benchmarks/sobel/sobel.c:85,86 */
    sub2s1ot(0:2) ::= sub2s@1(sub2s1i1(0:2), sub2s1i2(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    sub2u1ot(0:3) ::= sub2u@1(sub2u1i1(0:2), sub2u1i2(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    add4s1ot(0:4) ::= add4s@1(add4s1i1(0:3), add4s1i2(0:4)); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    sobel_ret(0:8) ::= sobel_ret_r(0:8); 	/* line# ../benchmarks/sobel/sobel.c:43 */
    Gx.RCLK1(0:1) ::= 0(0:1);
    line_buffer_d01(0:12) ::= (unsigned ter(0:16))(decoder(line_buffer_ad01(0:4))); 	/* line# ../benchmarks/sobel/sobel.c:30 */
    line_buffer_rd00(0:8) ::= dmux (line_buffer_ad00(0:4)) { 	/* line# ../benchmarks/sobel/sobel.c:30 */
        case 0 :  line_buffer_rg00(0:8);
        case 1 :  line_buffer_rg01(0:8);
        case 2 :  line_buffer_rg02(0:8);
        case 4 :  line_buffer_rg04(0:8);
        case 5 :  line_buffer_rg05(0:8);
        case 6 :  line_buffer_rg06(0:8);
        case 8 :  line_buffer_rg08(0:8);
        case 9 :  line_buffer_rg09(0:8);
        case 10 :  line_buffer_rg10(0:8);
    };
    /* Cyber nmux_multi_asgn = ignore */
    line_buffer_rg00(0:8) ::= nmux { 	/* line# ../benchmarks/sobel/sobel.c:30 */
        when ((unsigned ter(0:1))(line_buffer_we01(0:1) & line_buffer_d01(0:1))) :  line_buffer_wd01(0:8);
        default :  line_buffer_rg00(0:8);
    };
    /* Cyber nmux_multi_asgn = ignore */
    line_buffer_rg01(0:8) ::= nmux { 	/* line# ../benchmarks/sobel/sobel.c:30 */
        when ((unsigned ter(0:1))(line_buffer_we01(0:1) & line_buffer_d01(1:1))) :  line_buffer_wd01(0:8);
        default :  line_buffer_rg01(0:8);
    };
    /* Cyber nmux_multi_asgn = ignore */
    line_buffer_rg02(0:8) ::= nmux { 	/* line# ../benchmarks/sobel/sobel.c:30 */
        when ((unsigned ter(0:1))(line_buffer_we01(0:1) & line_buffer_d01(2:1))) :  line_buffer_wd01(0:8);
        default :  line_buffer_rg02(0:8);
    };
    /* Cyber nmux_multi_asgn = ignore */
    line_buffer_rg04(0:8) ::= nmux { 	/* line# ../benchmarks/sobel/sobel.c:30 */
        when ((unsigned ter(0:1))(line_buffer_we01(0:1) & line_buffer_d01(4:1))) :  line_buffer_wd01(0:8);
        default :  line_buffer_rg04(0:8);
    };
    /* Cyber nmux_multi_asgn = ignore */
    line_buffer_rg05(0:8) ::= nmux { 	/* line# ../benchmarks/sobel/sobel.c:30 */
        when ((unsigned ter(0:1))(line_buffer_we01(0:1) & line_buffer_d01(5:1))) :  line_buffer_wd01(0:8);
        default :  line_buffer_rg05(0:8);
    };
    /* Cyber nmux_multi_asgn = ignore */
    line_buffer_rg06(0:8) ::= nmux { 	/* line# ../benchmarks/sobel/sobel.c:30 */
        when ((unsigned ter(0:1))(line_buffer_we01(0:1) & line_buffer_d01(6:1))) :  line_buffer_wd01(0:8);
        default :  line_buffer_rg06(0:8);
    };
    /* Cyber nmux_multi_asgn = ignore */
    line_buffer_rg08(0:8) ::= nmux { 	/* line# ../benchmarks/sobel/sobel.c:30 */
        when ((unsigned ter(0:1))(line_buffer_we01(0:1) & line_buffer_d01(8:1))) :  line_buffer_wd01(0:8);
        default :  line_buffer_rg08(0:8);
    };
    /* Cyber nmux_multi_asgn = ignore */
    line_buffer_rg09(0:8) ::= nmux { 	/* line# ../benchmarks/sobel/sobel.c:30 */
        when ((unsigned ter(0:1))(line_buffer_we01(0:1) & line_buffer_d01(9:1))) :  line_buffer_wd01(0:8);
        default :  line_buffer_rg09(0:8);
    };
    /* Cyber nmux_multi_asgn = ignore */
    line_buffer_rg10(0:8) ::= nmux { 	/* line# ../benchmarks/sobel/sobel.c:30 */
        when ((unsigned ter(0:1))(line_buffer_we01(0:1) & line_buffer_d01(10:1))) :  line_buffer_wd01(0:8);
        default :  line_buffer_rg10(0:8);
    };
    RG_sumX(0:32) = 0(0:24) :: input_row_a02(0:8);
    RG_colOffset_Y(0:2) = 2(0:2); 	/* line# ../benchmarks/sobel/sobel.c:64 */
    RG_rowOffset(0:8) = input_row_a00(0:8);
    RG_sumY(0:32) = 0(0:24) :: input_row_a01(0:8);
    goto ST1_02;
    $

ST1_02 :
    line_buffer_ad00(0:4) = 0(0:2) :: (unsigned ter(0:2))(RG_colOffset_Y(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    line_buffer_ad01(0:4) = 0(0:3) :: M_331_t(0:1); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    line_buffer_wd01(0:8) = line_buffer_rd00(0:8); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    line_buffer_we01(0:1) = 1(0:1); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    decr2u_11i1(0:2) = (unsigned ter(0:2))(RG_colOffset_Y(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:64 */
    FF_Y(0:1) = decr2u_11ot(0:1); 	/* line# ../benchmarks/sobel/sobel.c:64 */
    RG_04(0:1) = M_331_t(0:1); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    decr2u_12i1(0:2) = (unsigned ter(0:2))(RG_colOffset_Y(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    M_331_t(0:1) = decr2u_12ot(0:1); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    goto ST1_03;
    $

ST1_03 :
    if (CT_01(0:1)) { 	/* line# ../benchmarks/sobel/sobel.c:64 */
    }
    else {
        line_buffer_rg02(0:8) = (unsigned ter(0:8))(RG_rowOffset(0:8)); 	/* line# ../benchmarks/sobel/sobel.c:71 */
    }
    CT_01(0:1) = FF_Y(0:1); 	/* line# ../benchmarks/sobel/sobel.c:64 */
    line_buffer_ad00(0:4) = 0(0:1) :: 1(0:1) :: (unsigned ter(0:2))(RG_colOffset_Y(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    line_buffer_ad01(0:4) = 0(0:1) :: 1(0:1) :: (0(0:1) :: RG_04(0:1)); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    line_buffer_wd01(0:8) = line_buffer_rd00(0:8); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    line_buffer_we01(0:1) = 1(0:1); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    RG_07(0:1) = CT_01(0:1); 	/* line# ../benchmarks/sobel/sobel.c:64 */
    goto ST1_04;
    $

ST1_04 :
    RG_colOffset_Y(0:2) = 0(0:1) :: FF_Y(0:1);
    if (RG_07(0:1)) { 	/* line# ../benchmarks/sobel/sobel.c:64 */
        JF_01(0:1) = 1(0:1);
    }
    else {
        line_buffer_rg06(0:8) = RG_sumY(24:8); 	/* line# ../benchmarks/sobel/sobel.c:72 */
        JF_01(0:1) = 0(0:1);
    }
    line_buffer_ad00(0:4) = 2(0:2) :: (unsigned ter(0:2))(RG_colOffset_Y(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    line_buffer_ad01(0:4) = 2(0:2) :: (0(0:1) :: RG_04(0:1)); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    line_buffer_wd01(0:8) = line_buffer_rd00(0:8); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    line_buffer_we01(0:1) = 1(0:1); 	/* line# ../benchmarks/sobel/sobel.c:66 */
    /* Cyber sfdl_jump = exclusive */
    if (JF_01(0:1)) {
        goto ST1_02;
    }
    else {
        goto ST1_05;
    }
    $

ST1_05 :
    RG_sumX(0:32) = 0(0:32); 	/* line# ../benchmarks/sobel/sobel.c:75 */
    line_buffer_rg10(0:8) = RG_sumX(24:8); 	/* line# ../benchmarks/sobel/sobel.c:73 */
    RG_colOffset_Y(0:2) = -1(0:2); 	/* line# ../benchmarks/sobel/sobel.c:84 */
    RG_rowOffset(0:8) = -1(0:8); 	/* line# ../benchmarks/sobel/sobel.c:82 */
    RG_sumY(0:32) = 0(0:32); 	/* line# ../benchmarks/sobel/sobel.c:76 */
    goto ST1_06;
    $

ST1_06 :
    RG_colOffset_Y(0:2) = colOffset11_t(0:2);
    FF_Y(0:1) = M_44_t(0:1);
    if (CT_02(0:1)) { 	/* line# ../benchmarks/sobel/sobel.c:84 */
        RG_sumY(0:32) = sumY_t(0:32); 	/* line# ../benchmarks/sobel/sobel.c:86 */
        RG_rowOffset_1(0:2) = RG_rowOffset(6:2);
    }
    else {
        RG_rowOffset_1(0:2) = rowOffset11_t(0:2);
        if (CT_03(0:1)) { 	/* line# ../benchmarks/sobel/sobel.c:82 */
            RG_sumY(0:32) = sumY_t(0:32); 	/* line# ../benchmarks/sobel/sobel.c:86 */
        }
        else {
            if (sumY_t(0:1)) { 	/* line# ../benchmarks/sobel/sobel.c:95 */
                addsub32s_32_12i1(0:2) = 0(0:2); 	/* line# ../benchmarks/sobel/sobel.c:95 */
                addsub32s_32_12i2(0:32) = sumY_t(0:32); 	/* line# ../benchmarks/sobel/sobel.c:95 */
                addsub32s_32_12_f(0:2) = 2(0:2);
                RG_sumY(0:32) = addsub32s_32_12ot(0:32); 	/* line# ../benchmarks/sobel/sobel.c:95 */
            }
            else {
                RG_sumY(0:32) = sumY_t(0:32); 	/* line# ../benchmarks/sobel/sobel.c:86 */
            }
        }
        incr2s4i1(0:2) = RG_rowOffset(6:2); 	/* line# ../benchmarks/sobel/sobel.c:82 */
        rowOffset11_t(0:2) = incr2s4ot(0:2); 	/* line# ../benchmarks/sobel/sobel.c:82 */
        CT_03(0:1) = ~rowOffset11_t(0:1); 	/* line# ../benchmarks/sobel/sobel.c:82 */
        M_44_t(0:1) = CT_03(0:1); 	/* line# ../benchmarks/sobel/sobel.c:82 */
    }
    CT_02(0:1) = ~colOffset11_t(0:1); 	/* line# ../benchmarks/sobel/sobel.c:84 */
    RG_07(0:1) = CT_02(0:1); 	/* line# ../benchmarks/sobel/sobel.c:84 */
    RG_rowOffset(0:8) = M_36_t(0:8); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    Gx.RA1(0:4) = add4s1ot(0:4); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    Gx.RE1(0:1) = 1(0:1); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    sub2s1i1(0:2) = 1(0:2); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    sub2s1i2(0:2) = (signed ter(0:2))(RG_colOffset_Y(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    incr2s3i1(0:2) = RG_rowOffset(6:2); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    M_31_t(0:2) = incr2s3ot(0:2); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    incr2s2i1(0:2) = (signed ter(0:2))(RG_colOffset_Y(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    M_32_t(0:2) = incr2s2ot(0:2); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    add4s1i1(0:3) = sub2u1ot(0:3); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    add4s1i2(0:4) = M_31_t(0:2) :: 0(0:2); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    line_buffer_ad00(0:4) = M_31_t(0:2) :: sub2s1ot(0:2); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    M_36_t(0:8) = line_buffer_rd00(0:8); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    Gy1i1(0:2) = M_31_t(0:2); 	/* line# ../benchmarks/sobel/sobel.c:86 */
    Gy1i2(0:2) = M_32_t(0:2); 	/* line# ../benchmarks/sobel/sobel.c:86 */
    mul12s1i1(0:9) = 0(0:1) :: (signed ter(0:8))(M_36_t(0:8)); 	/* line# ../benchmarks/sobel/sobel.c:86 */
    mul12s1i2(0:8) = Gy1ot(0:1) :: Gy1ot(0:1) :: Gy1ot(0:1) :: Gy1ot(0:1) :: Gy1ot(0:1) :: Gy1ot(0:3); 	/* line# ../benchmarks/sobel/sobel.c:86 */
    addsub32s1i1(0:32) = mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:1) :: mul12s1ot(0:16); 	/* line# ../benchmarks/sobel/sobel.c:86 */
    addsub32s1i2(0:32) = (signed ter(0:32))(RG_sumY(0:32)); 	/* line# ../benchmarks/sobel/sobel.c:86 */
    addsub32s1_f(0:2) = 1(0:2);
    sumY_t(0:32) = addsub32s1ot(0:32); 	/* line# ../benchmarks/sobel/sobel.c:86 */
    incr2s1i1(0:2) = (signed ter(0:2))(RG_colOffset_Y(0:2)); 	/* line# ../benchmarks/sobel/sobel.c:84 */
    colOffset11_t(0:2) = incr2s1ot(0:2); 	/* line# ../benchmarks/sobel/sobel.c:84 */
    sub2u1i1(0:2) = M_32_t(0:2); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    sub2u1i2(0:2) = M_31_t(0:2); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    goto ST1_07;
    $

ST1_07 :
    RG_sumX(0:32) = sumX_t(0:32); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    RG_rowOffset(0:8) = RG_rowOffset_1(0:1) :: RG_rowOffset_1(0:1) :: RG_rowOffset_1(0:1) :: RG_rowOffset_1(0:1) :: RG_rowOffset_1(0:1) :: RG_rowOffset_1(0:1) :: RG_rowOffset_1(0:2);
    if (RG_07(0:1)) { 	/* line# ../benchmarks/sobel/sobel.c:84 */
        JF_02(0:1) = 0(0:1);
    }
    else {
        RG_colOffset_Y(0:2) = -1(0:2); 	/* line# ../benchmarks/sobel/sobel.c:84 */
        if (FF_Y(0:1)) { 	/* line# ../benchmarks/sobel/sobel.c:82 */
            JF_02(0:1) = 0(0:1);
        }
        else {
            if (sumX_t(0:1)) { 	/* line# ../benchmarks/sobel/sobel.c:92 */
                sumX_t2(0:32) = addsub32s_32_11ot(0:32); 	/* line# ../benchmarks/sobel/sobel.c:92 */
                addsub32s_32_11i1(0:2) = 0(0:2); 	/* line# ../benchmarks/sobel/sobel.c:92 */
                addsub32s_32_11i2(0:32) = sumX_t(0:32); 	/* line# ../benchmarks/sobel/sobel.c:92 */
                addsub32s_32_11_f(0:2) = 2(0:2);
            }
            else {
                sumX_t2(0:32) = sumX_t(0:32); 	/* line# ../benchmarks/sobel/sobel.c:85 */
            }
            sobel_ret_r(0:8) = ~SUM3_t(0:8); 	/* line# ../benchmarks/sobel/sobel.c:103,104 */
            JF_02(0:1) = 1(0:1);
            addsub32s1i1(0:32) = sumX_t4(0:32); 	/* line# ../benchmarks/sobel/sobel.c:98 */
            addsub32s1i2(0:32) = sumY_t3(0:32); 	/* line# ../benchmarks/sobel/sobel.c:98 */
            addsub32s1_f(0:2) = 1(0:2);
            SUM2_t(0:32) = addsub32s1ot(0:32); 	/* line# ../benchmarks/sobel/sobel.c:98 */
            M_39_t(0:32) = SUM2_t(0:32); 	/* line# ../benchmarks/sobel/sobel.c:100 */
            if (~sumX_t2(0:1) & |>sumX_t2(1:23)) { 	/* line# ../benchmarks/sobel/sobel.c:93 */
                sumX_t4(0:32) = (signed ter(0:32))(255(0:32)); 	/* line# ../benchmarks/sobel/sobel.c:93 */
            }
            else {
                sumX_t4(0:32) = sumX_t2(0:32);
            }
            if (~RG_sumY(0:1) & |>RG_sumY(1:23)) { 	/* line# ../benchmarks/sobel/sobel.c:96 */
                sumY_t3(0:32) = (signed ter(0:32))(255(0:32)); 	/* line# ../benchmarks/sobel/sobel.c:96 */
            }
            else {
                sumY_t3(0:32) = (signed ter(0:32))(RG_sumY(0:32));
            }
            if (~M_39_t(0:1) & |>M_39_t(1:23)) { 	/* line# ../benchmarks/sobel/sobel.c:100 */
                SUM3_t(0:8) = 255(0:8); 	/* line# ../benchmarks/sobel/sobel.c:100 */
            }
            else {
                SUM3_t(0:8) = SUM2_t(24:8);
            }
        }
    }
    addsub32s_321i1(0:32) = (signed ter(0:32))(RG_sumX(0:32)); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    addsub32s_321i2(0:16) = mul12s1ot(0:16); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    addsub32s_321_f(0:2) = 1(0:2);
    sumX_t(0:32) = addsub32s_321ot(0:32); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    mul12s1i1(0:9) = 0(0:1) :: (signed ter(0:8))(RG_rowOffset(0:8)); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    mul12s1i2(0:8) = Gx.RD1(0:8); 	/* line# ../benchmarks/sobel/sobel.c:85 */
    /* Cyber sfdl_jump = exclusive */
    if (JF_02(0:1)) {
        goto ST1_01;
    }
    else {
        goto ST1_06;
    }
}

/*
#@FLIB /proj/cad/cwb-6.1/packages/asic_45.FLIB
#@LMT %AUTO%.LMT
##@CLK  100000
##@UNIT 1/10ps
##IDX NAME     LMT  KIND              BITW   DELAY  AREA
#  1  add4s      1  (s)+              4,4    3600     26
#  2  sub2u      1  (u)-              2,3    1800     10
#  3  sub2s      1  (s)-              2,2    2300     10
#  4  mul12s     1  (s)*              9,16   19600   652
#  5  incr2s     4  (s)INCR           2,2    1000      2
#  6  decr2u_1    2  (u)DECR           2,1    1000      2
#  7  addsub32s    1  (s)+,-            32,32  15300   263
#  8  Gy         1  @Gy               (2,2),3  2090     36
#  9  delay_funit_1    1  @delay_funit_1    (8),8  1         0
# 10  addsub32s_32    1  (s)+,-            32,32  15300   263
# 11  addsub32s_32_1    2  (s)+,-            32,32  15300   263
#@END

#@MLIB %AUTO%.MLIB
##@VERSION { 3.00 }
##@LIB { sobel }
##@UNIT  1/10ps 
#@MLIB {
#    NAME	MEMB8W9
#    KIND	R1
#    BITWIDTH	8
#    DELAY	x2
#    WORD	9
#    WRITE_SYNC	YES
#    DEFMOD {
#        in             ter (0:4)      RA1              /* ra:1 */;
#        out            ter (0:8)      RD1              /* rd:1 */;
#        in             ter (0:1)      RE1              /* re:1 */;
#        in             ter (0:1)      RCLK1            /* rclk:1 */;
#    }
#}
##@END { sobel }

#@MCNT %AUTO%.MCNT
##@VERSION { 3.00 }
##@CNT { sobel }
#@MCNT {
#    NAME	MEMB8W9
#    LIMIT	1
#}
#@MCNT {
#    NAME	line_buffer[][]
#    LIMIT	1
#    KIND	R1,W1
#    BITWIDTH	8
#    DELAY	0
#}
##@END { sobel }

#@MLMT %AUTO%.MLMT
##@UNIT 1/10ps
##IDX NAME     LMT  KIND      BITW[xWORD]  DELAY  ARRAY_DIV_NAME
#  1  MEMB8W9    1  R1                8x9   1x2                 	
#  2  line_buffer[][]    1  R1,W1            8x12     0                 	
#@END

#@BLIB /proj/cad/cwb-6.1/packages/asic_45.BLIB
##@VERSION{2.00}
##@LIB{CWBSTDBLIB}
##@UNIT 1/10ps
#@BLIB {
#    NAME	nmux2_1
#    KIND	nmux
#    WAY	2
#    BITWIDTH	1
#    DELAY	700
#    AREA	1
#    NET	6
#    PIN_PAIR	6
#    LSTAGE	2
#}
#@BLIB {
#    NAME	nmux2_2
#    KIND	nmux
#    WAY	2
#    BITWIDTH	2
#    DELAY	900
#    AREA	3
#    NET	10
#    PIN_PAIR	12
#    LSTAGE	2
#}
#@BLIB {
#    NAME	nmux2_4
#    KIND	nmux
#    WAY	2
#    BITWIDTH	4
#    DELAY	1100
#    AREA	9
#    NET	20
#    PIN_PAIR	26
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux2_8
#    KIND	nmux
#    WAY	2
#    BITWIDTH	8
#    DELAY	1400
#    AREA	16
#    NET	36
#    PIN_PAIR	50
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux2_16
#    KIND	nmux
#    WAY	2
#    BITWIDTH	16
#    DELAY	1600
#    AREA	32
#    NET	70
#    PIN_PAIR	100
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux2_32
#    KIND	nmux
#    WAY	2
#    BITWIDTH	32
#    DELAY	1700
#    AREA	64
#    NET	140
#    PIN_PAIR	202
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nmux2_64
#    KIND	nmux
#    WAY	2
#    BITWIDTH	64
#    DELAY	1500
#    AREA	128
#    NET	275
#    PIN_PAIR	401
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nmux4_1
#    KIND	nmux
#    WAY	4
#    BITWIDTH	1
#    DELAY	800
#    AREA	3
#    NET	11
#    PIN_PAIR	11
#    LSTAGE	2
#}
#@BLIB {
#    NAME	nmux4_2
#    KIND	nmux
#    WAY	4
#    BITWIDTH	2
#    DELAY	1000
#    AREA	6
#    NET	18
#    PIN_PAIR	22
#    LSTAGE	2
#}
#@BLIB {
#    NAME	nmux4_4
#    KIND	nmux
#    WAY	4
#    BITWIDTH	4
#    DELAY	1200
#    AREA	17
#    NET	36
#    PIN_PAIR	48
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux4_8
#    KIND	nmux
#    WAY	4
#    BITWIDTH	8
#    DELAY	1500
#    AREA	30
#    NET	64
#    PIN_PAIR	92
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux4_16
#    KIND	nmux
#    WAY	4
#    BITWIDTH	16
#    DELAY	1700
#    AREA	61
#    NET	124
#    PIN_PAIR	184
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux4_32
#    KIND	nmux
#    WAY	4
#    BITWIDTH	32
#    DELAY	1900
#    AREA	121
#    NET	248
#    PIN_PAIR	372
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux4_64
#    KIND	nmux
#    WAY	4
#    BITWIDTH	64
#    DELAY	1600
#    AREA	242
#    NET	490
#    PIN_PAIR	742
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux8_1
#    KIND	nmux
#    WAY	8
#    BITWIDTH	1
#    DELAY	1000
#    AREA	6
#    NET	21
#    PIN_PAIR	21
#    LSTAGE	2
#}
#@BLIB {
#    NAME	nmux8_2
#    KIND	nmux
#    WAY	8
#    BITWIDTH	2
#    DELAY	1300
#    AREA	13
#    NET	34
#    PIN_PAIR	42
#    LSTAGE	2
#}
#@BLIB {
#    NAME	nmux8_4
#    KIND	nmux
#    WAY	8
#    BITWIDTH	4
#    DELAY	1600
#    AREA	31
#    NET	66
#    PIN_PAIR	90
#    LSTAGE	2
#}
#@BLIB {
#    NAME	nmux8_8
#    KIND	nmux
#    WAY	8
#    BITWIDTH	8
#    DELAY	1700
#    AREA	59
#    NET	120
#    PIN_PAIR	176
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux8_16
#    KIND	nmux
#    WAY	8
#    BITWIDTH	16
#    DELAY	2000
#    AREA	119
#    NET	232
#    PIN_PAIR	352
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux8_32
#    KIND	nmux
#    WAY	8
#    BITWIDTH	32
#    DELAY	2200
#    AREA	233
#    NET	463
#    PIN_PAIR	711
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nmux8_64
#    KIND	nmux
#    WAY	8
#    BITWIDTH	64
#    DELAY	1800
#    AREA	460
#    NET	906
#    PIN_PAIR	1410
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nmux16_1
#    KIND	nmux
#    WAY	16
#    BITWIDTH	1
#    DELAY	1500
#    AREA	14
#    NET	43
#    PIN_PAIR	43
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux16_2
#    KIND	nmux
#    WAY	16
#    BITWIDTH	2
#    DELAY	1700
#    AREA	33
#    NET	80
#    PIN_PAIR	96
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nmux16_4
#    KIND	nmux
#    WAY	16
#    BITWIDTH	4
#    DELAY	1900
#    AREA	76
#    NET	155
#    PIN_PAIR	203
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nmux16_8
#    KIND	nmux
#    WAY	16
#    BITWIDTH	8
#    DELAY	2200
#    AREA	127
#    NET	248
#    PIN_PAIR	360
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nmux16_16
#    KIND	nmux
#    WAY	16
#    BITWIDTH	16
#    DELAY	2400
#    AREA	255
#    NET	480
#    PIN_PAIR	720
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nmux16_32
#    KIND	nmux
#    WAY	16
#    BITWIDTH	32
#    DELAY	2700
#    AREA	506
#    NET	967
#    PIN_PAIR	1463
#    LSTAGE	5
#}
#@BLIB {
#    NAME	nmux16_64
#    KIND	nmux
#    WAY	16
#    BITWIDTH	64
#    DELAY	2300
#    AREA	995
#    NET	1878
#    PIN_PAIR	2886
#    LSTAGE	5
#}
#@BLIB {
#    NAME	nmux32_1
#    KIND	nmux
#    WAY	32
#    BITWIDTH	1
#    DELAY	1700
#    AREA	28
#    NET	85
#    PIN_PAIR	85
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux32_2
#    KIND	nmux
#    WAY	32
#    BITWIDTH	2
#    DELAY	1900
#    AREA	56
#    NET	138
#    PIN_PAIR	170
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux32_4
#    KIND	nmux
#    WAY	32
#    BITWIDTH	4
#    DELAY	2300
#    AREA	115
#    NET	248
#    PIN_PAIR	344
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nmux32_8
#    KIND	nmux
#    WAY	32
#    BITWIDTH	8
#    DELAY	2400
#    AREA	251
#    NET	488
#    PIN_PAIR	712
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nmux32_16
#    KIND	nmux
#    WAY	32
#    BITWIDTH	16
#    DELAY	2600
#    AREA	502
#    NET	944
#    PIN_PAIR	1424
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nmux32_32
#    KIND	nmux
#    WAY	32
#    BITWIDTH	32
#    DELAY	2900
#    AREA	982
#    NET	1877
#    PIN_PAIR	2869
#    LSTAGE	5
#}
#@BLIB {
#    NAME	nmux32_64
#    KIND	nmux
#    WAY	32
#    BITWIDTH	64
#    DELAY	2700
#    AREA	1946
#    NET	3660
#    PIN_PAIR	5676
#    LSTAGE	5
#}
#@BLIB {
#    NAME	nmux64_1
#    KIND	nmux
#    WAY	64
#    BITWIDTH	1
#    DELAY	1800
#    AREA	56
#    NET	171
#    PIN_PAIR	171
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nmux64_2
#    KIND	nmux
#    WAY	64
#    BITWIDTH	2
#    DELAY	2000
#    AREA	113
#    NET	278
#    PIN_PAIR	342
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nmux64_4
#    KIND	nmux
#    WAY	64
#    BITWIDTH	4
#    DELAY	2500
#    AREA	228
#    NET	494
#    PIN_PAIR	686
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nmux64_8
#    KIND	nmux
#    WAY	64
#    BITWIDTH	8
#    DELAY	2500
#    AREA	504
#    NET	984
#    PIN_PAIR	1432
#    LSTAGE	5
#}
#@BLIB {
#    NAME	nmux64_16
#    KIND	nmux
#    WAY	64
#    BITWIDTH	16
#    DELAY	2600
#    AREA	1008
#    NET	1904
#    PIN_PAIR	2864
#    LSTAGE	5
#}
#@BLIB {
#    NAME	nmux64_32
#    KIND	nmux
#    WAY	64
#    BITWIDTH	32
#    DELAY	3100
#    AREA	1955
#    NET	3755
#    PIN_PAIR	5739
#    LSTAGE	6
#}
#@BLIB {
#    NAME	nmux64_64
#    KIND	nmux
#    WAY	64
#    BITWIDTH	64
#    DELAY	2800
#    AREA	3917
#    NET	7434
#    PIN_PAIR	11466
#    LSTAGE	6
#}
#@BLIB {
#    NAME	reg1
#    KIND	reg
#    BITWIDTH	1
#    AREA	6
#    NET	5
#    PIN_PAIR	5
#}
#@BLIB {
#    NAME	reg4
#    KIND	reg
#    BITWIDTH	4
#    AREA	24
#    NET	14
#    PIN_PAIR	20
#}
#@BLIB {
#    NAME	reg8
#    KIND	reg
#    BITWIDTH	8
#    AREA	48
#    NET	26
#    PIN_PAIR	40
#}
#@BLIB {
#    NAME	dec2
#    KIND	dec
#    BITWIDTH	2
#    DELAY	200
#    AREA	1
#    NET	2
#    PIN_PAIR	3
#}
#@BLIB {
#    NAME	dec4
#    KIND	dec
#    BITWIDTH	4
#    DELAY	900
#    AREA	5
#    NET	10
#    PIN_PAIR	16
#    LSTAGE	2
#}
#@BLIB {
#    NAME	dec8
#    KIND	dec
#    BITWIDTH	8
#    DELAY	1300
#    AREA	14
#    NET	18
#    PIN_PAIR	39
#    LSTAGE	3
#}
#@BLIB {
#    NAME	dec16
#    KIND	dec
#    BITWIDTH	16
#    DELAY	1300
#    AREA	25
#    NET	37
#    PIN_PAIR	74
#    LSTAGE	2
#}
#@BLIB {
#    NAME	dec32
#    KIND	dec
#    BITWIDTH	32
#    DELAY	1800
#    AREA	42
#    NET	58
#    PIN_PAIR	138
#    LSTAGE	2
#}
#@BLIB {
#    NAME	dec64
#    KIND	dec
#    BITWIDTH	64
#    DELAY	2000
#    AREA	78
#    NET	100
#    PIN_PAIR	258
#    LSTAGE	3
#}
#@BLIB {
#    NAME	dec128
#    KIND	dec
#    BITWIDTH	128
#    DELAY	2500
#    AREA	149
#    NET	194
#    PIN_PAIR	483
#    LSTAGE	5
#}
#@BLIB {
#    NAME	dmux2_1
#    KIND	dmux
#    WAY	2
#    BITWIDTH	1
#    DELAY	700
#    AREA	1
#    NET	4
#    PIN_PAIR	4
#    LSTAGE	1
#}
#@BLIB {
#    NAME	dmux2_16
#    KIND	dmux
#    WAY	2
#    BITWIDTH	16
#    DELAY	2000
#    AREA	32
#    NET	69
#    PIN_PAIR	100
#    LSTAGE	3
#}
#@BLIB {
#    NAME	dmux4_1
#    KIND	dmux
#    WAY	4
#    BITWIDTH	1
#    DELAY	1700
#    AREA	5
#    NET	11
#    PIN_PAIR	15
#    LSTAGE	2
#}
#@BLIB {
#    NAME	dmux4_16
#    KIND	dmux
#    WAY	4
#    BITWIDTH	16
#    DELAY	2500
#    AREA	64
#    NET	128
#    PIN_PAIR	194
#    LSTAGE	5
#}
#@BLIB {
#    NAME	dmux8_1
#    KIND	dmux
#    WAY	8
#    BITWIDTH	1
#    DELAY	2800
#    AREA	11
#    NET	22
#    PIN_PAIR	33
#    LSTAGE	4
#}
#@BLIB {
#    NAME	dmux8_16
#    KIND	dmux
#    WAY	8
#    BITWIDTH	16
#    DELAY	3400
#    AREA	127
#    NET	240
#    PIN_PAIR	381
#    LSTAGE	5
#}
#@BLIB {
#    NAME	dmux16_1
#    KIND	dmux
#    WAY	16
#    BITWIDTH	1
#    DELAY	3000
#    AREA	23
#    NET	43
#    PIN_PAIR	65
#    LSTAGE	6
#}
#@BLIB {
#    NAME	dmux16_16
#    KIND	dmux
#    WAY	16
#    BITWIDTH	16
#    DELAY	3800
#    AREA	275
#    NET	499
#    PIN_PAIR	787
#    LSTAGE	9
#}
#@BLIB {
#    NAME	dmux64_1
#    KIND	dmux
#    WAY	64
#    BITWIDTH	1
#    DELAY	4300
#    AREA	87
#    NET	146
#    PIN_PAIR	234
#    LSTAGE	8
#}
#@BLIB {
#    NAME	dmux64_16
#    KIND	dmux
#    WAY	64
#    BITWIDTH	16
#    DELAY	4800
#    AREA	1075
#    NET	1971
#    PIN_PAIR	3081
#    LSTAGE	9
#}
#@BLIB {
#    NAME	dmux256_1
#    KIND	dmux
#    WAY	256
#    BITWIDTH	1
#    DELAY	5300
#    AREA	286
#    NET	519
#    PIN_PAIR	819
#    LSTAGE	11
#}
#@BLIB {
#    NAME	dmux256_16
#    KIND	dmux
#    WAY	256
#    BITWIDTH	16
#    DELAY	5900
#    AREA	4243
#    NET	7774
#    PIN_PAIR	12168
#    LSTAGE	16
#}
#@BLIB {
#    NAME	inv
#    KIND	inv
#    BITWIDTH	1
#    DELAY	300
#    AREA	1
#    NET	2
#    PIN_PAIR	2
#    LSTAGE	1
#}
#@BLIB {
#    NAME	and2
#    KIND	and
#    INPUTNUM	2
#    BITWIDTH	1
#    DELAY	500
#    AREA	1
#    NET	3
#    PIN_PAIR	3
#    LSTAGE	1
#}
#@BLIB {
#    NAME	and4
#    KIND	and
#    INPUTNUM	4
#    BITWIDTH	1
#    DELAY	700
#    AREA	1
#    NET	5
#    PIN_PAIR	5
#    LSTAGE	1
#}
#@BLIB {
#    NAME	and8
#    KIND	and
#    INPUTNUM	8
#    BITWIDTH	1
#    DELAY	900
#    AREA	3
#    NET	11
#    PIN_PAIR	11
#    LSTAGE	2
#}
#@BLIB {
#    NAME	and16
#    KIND	and
#    INPUTNUM	16
#    BITWIDTH	1
#    DELAY	1300
#    AREA	7
#    NET	21
#    PIN_PAIR	21
#    LSTAGE	2
#}
#@BLIB {
#    NAME	and32
#    KIND	and
#    INPUTNUM	32
#    BITWIDTH	1
#    DELAY	1400
#    AREA	16
#    NET	43
#    PIN_PAIR	43
#    LSTAGE	3
#}
#@BLIB {
#    NAME	and64
#    KIND	and
#    INPUTNUM	64
#    BITWIDTH	1
#    DELAY	2000
#    AREA	28
#    NET	85
#    PIN_PAIR	85
#    LSTAGE	3
#}
#@BLIB {
#    NAME	and256
#    KIND	and
#    INPUTNUM	256
#    BITWIDTH	1
#    DELAY	2700
#    AREA	113
#    NET	341
#    PIN_PAIR	341
#    LSTAGE	4
#}
#@BLIB {
#    NAME	or2
#    KIND	or
#    INPUTNUM	2
#    BITWIDTH	1
#    DELAY	500
#    AREA	1
#    NET	3
#    PIN_PAIR	3
#    LSTAGE	1
#}
#@BLIB {
#    NAME	or4
#    KIND	or
#    INPUTNUM	4
#    BITWIDTH	1
#    DELAY	700
#    AREA	1
#    NET	5
#    PIN_PAIR	5
#    LSTAGE	1
#}
#@BLIB {
#    NAME	or8
#    KIND	or
#    INPUTNUM	8
#    BITWIDTH	1
#    DELAY	800
#    AREA	3
#    NET	11
#    PIN_PAIR	11
#    LSTAGE	2
#}
#@BLIB {
#    NAME	or16
#    KIND	or
#    INPUTNUM	16
#    BITWIDTH	1
#    DELAY	1100
#    AREA	6
#    NET	21
#    PIN_PAIR	21
#    LSTAGE	2
#}
#@BLIB {
#    NAME	or32
#    KIND	or
#    INPUTNUM	32
#    BITWIDTH	1
#    DELAY	1500
#    AREA	14
#    NET	43
#    PIN_PAIR	43
#    LSTAGE	3
#}
#@BLIB {
#    NAME	or64
#    KIND	or
#    INPUTNUM	64
#    BITWIDTH	1
#    DELAY	1700
#    AREA	28
#    NET	85
#    PIN_PAIR	85
#    LSTAGE	3
#}
#@BLIB {
#    NAME	or256
#    KIND	or
#    INPUTNUM	256
#    BITWIDTH	1
#    DELAY	2000
#    AREA	113
#    NET	341
#    PIN_PAIR	341
#    LSTAGE	4
#}
#@BLIB {
#    NAME	xor2
#    KIND	xor
#    INPUTNUM	2
#    BITWIDTH	1
#    DELAY	800
#    AREA	3
#    NET	7
#    PIN_PAIR	9
#    LSTAGE	2
#}
#@BLIB {
#    NAME	xor4
#    KIND	xor
#    INPUTNUM	4
#    BITWIDTH	1
#    DELAY	1600
#    AREA	6
#    NET	11
#    PIN_PAIR	13
#    LSTAGE	3
#}
#@BLIB {
#    NAME	xor8
#    KIND	xor
#    INPUTNUM	8
#    BITWIDTH	1
#    DELAY	2400
#    AREA	11
#    NET	15
#    PIN_PAIR	15
#    LSTAGE	3
#}
#@BLIB {
#    NAME	xor16
#    KIND	xor
#    INPUTNUM	16
#    BITWIDTH	1
#    DELAY	4800
#    AREA	32
#    NET	48
#    PIN_PAIR	56
#    LSTAGE	8
#}
#@BLIB {
#    NAME	xor32
#    KIND	xor
#    INPUTNUM	32
#    BITWIDTH	1
#    DELAY	4500
#    AREA	49
#    NET	63
#    PIN_PAIR	63
#    LSTAGE	5
#}
#@BLIB {
#    NAME	xor64
#    KIND	xor
#    INPUTNUM	64
#    BITWIDTH	1
#    DELAY	5400
#    AREA	100
#    NET	127
#    PIN_PAIR	127
#    LSTAGE	6
#}
#@BLIB {
#    NAME	xor256
#    KIND	xor
#    INPUTNUM	256
#    BITWIDTH	1
#    DELAY	7200
#    AREA	406
#    NET	511
#    PIN_PAIR	511
#    LSTAGE	8
#}
#@BLIB {
#    NAME	nand2
#    KIND	nand
#    INPUTNUM	2
#    BITWIDTH	1
#    DELAY	400
#    AREA	1
#    NET	3
#    PIN_PAIR	3
#    LSTAGE	1
#}
#@BLIB {
#    NAME	nand4
#    KIND	nand
#    INPUTNUM	4
#    BITWIDTH	1
#    DELAY	600
#    AREA	1
#    NET	5
#    PIN_PAIR	5
#    LSTAGE	1
#}
#@BLIB {
#    NAME	nand8
#    KIND	nand
#    INPUTNUM	8
#    BITWIDTH	1
#    DELAY	1100
#    AREA	3
#    NET	11
#    PIN_PAIR	11
#    LSTAGE	2
#}
#@BLIB {
#    NAME	nand16
#    KIND	nand
#    INPUTNUM	16
#    BITWIDTH	1
#    DELAY	1700
#    AREA	6
#    NET	21
#    PIN_PAIR	21
#    LSTAGE	2
#}
#@BLIB {
#    NAME	nand32
#    KIND	nand
#    INPUTNUM	32
#    BITWIDTH	1
#    DELAY	1600
#    AREA	14
#    NET	43
#    PIN_PAIR	43
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nand64
#    KIND	nand
#    INPUTNUM	64
#    BITWIDTH	1
#    DELAY	1800
#    AREA	27
#    NET	85
#    PIN_PAIR	85
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nand256
#    KIND	nand
#    INPUTNUM	256
#    BITWIDTH	1
#    DELAY	3000
#    AREA	113
#    NET	341
#    PIN_PAIR	341
#    LSTAGE	4
#}
#@BLIB {
#    NAME	nor2
#    KIND	nor
#    INPUTNUM	2
#    BITWIDTH	1
#    DELAY	500
#    AREA	1
#    NET	3
#    PIN_PAIR	3
#    LSTAGE	1
#}
#@BLIB {
#    NAME	nor4
#    KIND	nor
#    INPUTNUM	4
#    BITWIDTH	1
#    DELAY	1000
#    AREA	1
#    NET	5
#    PIN_PAIR	5
#    LSTAGE	1
#}
#@BLIB {
#    NAME	nor8
#    KIND	nor
#    INPUTNUM	8
#    BITWIDTH	1
#    DELAY	1400
#    AREA	3
#    NET	11
#    PIN_PAIR	11
#    LSTAGE	2
#}
#@BLIB {
#    NAME	nor16
#    KIND	nor
#    INPUTNUM	16
#    BITWIDTH	1
#    DELAY	1600
#    AREA	6
#    NET	21
#    PIN_PAIR	21
#    LSTAGE	2
#}
#@BLIB {
#    NAME	nor32
#    KIND	nor
#    INPUTNUM	32
#    BITWIDTH	1
#    DELAY	1800
#    AREA	14
#    NET	43
#    PIN_PAIR	43
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nor64
#    KIND	nor
#    INPUTNUM	64
#    BITWIDTH	1
#    DELAY	2300
#    AREA	27
#    NET	85
#    PIN_PAIR	85
#    LSTAGE	3
#}
#@BLIB {
#    NAME	nor256
#    KIND	nor
#    INPUTNUM	256
#    BITWIDTH	1
#    DELAY	2900
#    AREA	113
#    NET	341
#    PIN_PAIR	341
#    LSTAGE	4
#}
#@BLIB {
#    NAME	xnor2
#    KIND	xnor
#    INPUTNUM	2
#    BITWIDTH	1
#    DELAY	800
#    AREA	3
#    NET	7
#    PIN_PAIR	9
#    LSTAGE	2
#}
#@BLIB {
#    NAME	xnor4
#    KIND	xnor
#    INPUTNUM	4
#    BITWIDTH	1
#    DELAY	1600
#    AREA	4
#    NET	7
#    PIN_PAIR	7
#    LSTAGE	2
#}
#@BLIB {
#    NAME	xnor8
#    KIND	xnor
#    INPUTNUM	8
#    BITWIDTH	1
#    DELAY	2600
#    AREA	11
#    NET	15
#    PIN_PAIR	15
#    LSTAGE	3
#}
#@BLIB {
#    NAME	xnor16
#    KIND	xnor
#    INPUTNUM	16
#    BITWIDTH	1
#    DELAY	4200
#    AREA	42
#    NET	58
#    PIN_PAIR	75
#    LSTAGE	13
#}
#@BLIB {
#    NAME	xnor32
#    KIND	xnor
#    INPUTNUM	32
#    BITWIDTH	1
#    DELAY	4500
#    AREA	49
#    NET	63
#    PIN_PAIR	63
#    LSTAGE	5
#}
#@BLIB {
#    NAME	xnor64
#    KIND	xnor
#    INPUTNUM	64
#    BITWIDTH	1
#    DELAY	5400
#    AREA	100
#    NET	127
#    PIN_PAIR	127
#    LSTAGE	6
#}
#@BLIB {
#    NAME	xnor256
#    KIND	xnor
#    INPUTNUM	256
#    BITWIDTH	1
#    DELAY	7200
#    AREA	406
#    NET	511
#    PIN_PAIR	511
#    LSTAGE	8
#}
#@BLIB {
#    NAME	consttable2_8
#    KIND	consttable
#    SIZE	2
#    BITWIDTH	8
#    DELAY	200
#    AREA	1
#    NET	4
#    PIN_PAIR	9
#}
#@BLIB {
#    NAME	consttable2_32
#    KIND	consttable
#    SIZE	2
#    BITWIDTH	32
#    DELAY	600
#    AREA	1
#    NET	5
#    PIN_PAIR	34
#    LSTAGE	1
#}
#@BLIB {
#    NAME	consttable16_8
#    KIND	consttable
#    SIZE	16
#    BITWIDTH	8
#    DELAY	3000
#    AREA	50
#    NET	53
#    PIN_PAIR	122
#    LSTAGE	6
#}
#@BLIB {
#    NAME	consttable16_32
#    KIND	consttable
#    SIZE	16
#    BITWIDTH	32
#    DELAY	3400
#    AREA	120
#    NET	130
#    PIN_PAIR	317
#    LSTAGE	9
#}
#@BLIB {
#    NAME	consttable64_8
#    KIND	consttable
#    SIZE	64
#    BITWIDTH	8
#    DELAY	4900
#    AREA	146
#    NET	162
#    PIN_PAIR	387
#    LSTAGE	9
#}
#@BLIB {
#    NAME	consttable64_32
#    KIND	consttable
#    SIZE	64
#    BITWIDTH	32
#    DELAY	5000
#    AREA	392
#    NET	434
#    PIN_PAIR	1020
#    LSTAGE	13
#}
#@BLIB {
#    NAME	consttable256_8
#    KIND	consttable
#    SIZE	256
#    BITWIDTH	8
#    DELAY	6100
#    AREA	476
#    NET	482
#    PIN_PAIR	1203
#    LSTAGE	14
#}
#@BLIB {
#    NAME	consttable256_32
#    KIND	consttable
#    SIZE	256
#    BITWIDTH	32
#    DELAY	5800
#    AREA	1350
#    NET	1466
#    PIN_PAIR	3523
#    LSTAGE	12
#}
##@END{CWBSTDBLIB}
#@END
*/
